function importfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   WHI100PAD = IMPORTFILE(FILENAME) Reads data from text file FILENAME for
%   the default selection.
%
%   WHI100PAD = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   Whi100pad = importfile('Whi100pad.txt', 1, 10001);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2021/06/09 19:06:43

%% Initialize variables.
delimiter = ' ';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
filename = 'Whi100pad.txt';
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
Whi100pad = table;
Whi100pad.KEeV = cell2mat(raw(:, 1));
Whi100pad.VarName2 = cell2mat(raw(:, 2));
Whi100pad.VarName3 = cell2mat(raw(:, 3));
Whi100pad.VarName4 = cell2mat(raw(:, 4));
Whi100pad.VarName5 = cell2mat(raw(:, 5));
Whi100pad.VarName6 = cell2mat(raw(:, 6));
Whi100pad.VarName7 = cell2mat(raw(:, 7));
Whi100pad.VarName8 = cell2mat(raw(:, 8));
Whi100pad.VarName9 = cell2mat(raw(:, 9));
Whi100pad.VarName10 = cell2mat(raw(:, 10));
Whi100pad.VarName11 = cell2mat(raw(:, 11));
Whi100pad.VarName12 = cell2mat(raw(:, 12)); 
Whi100pad.VarName13 = cell2mat(raw(:, 13));
Whi100pad.VarName14 = cell2mat(raw(:, 14));
Whi100pad.VarName15 = cell2mat(raw(:, 15));

%we get the first row elements. However, this comes out as a table
%colums data (the pitch angles)
% Cs1 = 2;
% Ce1 = 15;
%yaxis = Whi100pad(1, Cs1:Ce1);
yaxis = Whi100pad(1, 2:15);

%convert the table into an array
yaxis = yaxis{:,:};

%transpose the yaxis
%yyaxis = yaxis.';

%data setup
%startrow = 2; %not less than 2
%endrow = 10000; %not more than 10000

startrow = 2; %not less than 2
endrow = 10000; %not more than 10001
%THIS CAN KEEP CONTINUING

%NB: if you want to select multiple specific rows/columns, 
%the selected rows/colums are are kept in a list
%like this [s1:e1 s2:e2 s3 s4:e4 s5 s6] etc

%obtain the log scale of the energy
Xt = log10(Whi100pad.KEeV(startrow:endrow));
%Xt = log(Whi100pad.KEeV([srow1:erow1 srow2:erow2 srow3:erow3 srow4:erow4]));
%obtain a surface plot
[X,Y] = meshgrid(Xt, yaxis); 
%without the log
[X1,Y1] = meshgrid(Whi100pad.KEeV(startrow:endrow), yaxis);

%the Z axis should be a matrix from the rest part of the data
Z = Whi100pad(startrow:endrow,2:15);
%Z = Whi100pad([srow1:erow1 srow2:erow2 srow3:erow3 srow4:erow4],Cs1:Ce1);

%since this comes out as a table, convert is to a matrix
Z = Z{:,:};

%obtain the log scale
Zt = log10(Z);
%transpose Z to make the dimensions consistent
Ztrans = Zt.';

%without the log
%Zdt = Z.';

%mass (m), constant (k0)
m = 9.1094e-28;
k0 = 1.6022e-12;

%solving for v_pal (parallel)
v_pal = sqrt((2*X1.*k0)/m).*cosd(Y1);
%v_pal5 = smooth2a(v_pal,10);

%solving for v_per (perpendicular)
v_per = sqrt((2*X1.*k0)/m).*sind(Y1);
%v_per5 = smooth2a(v_per,10);

%total velocity
v = sqrt(v_pal.^2 + v_per.^2);

%for the distribution function
%Flux in terms of J(v_per,v_pal)= v^2/m F(v_per,v_pal)
V1 = (v.^2)/m;

%for the distribution function F(v_per,v_pal)=F
%F = Zdt./V1;
F = Ztrans./V1;
dF = log10(F);

%the surface plot for flux
s = surf(X,Y,Ztrans);

%Energy vs pitch angle
%s = contourf(X,Y,Ztrans,'edgecolor', 'none');


%velicity distribution function vs v_pal
 %s = surf(v_pal,v_per,F);
%     s = contourf(v_per,v_pal,dF,100,'edgecolor', 'none');hold on
%     s = contourf(v_per,-v_pal,dF,100,'edgecolor', 'none');hold on
%     s = contourf(-v_per,v_pal,dF,100,'edgecolor', 'none');hold on
%     s = contourf(-v_per,-v_pal,dF,100,'edgecolor', 'none');
%       c = colorbar;
%       c.Label.String = 'log_{10} F(v_{\perp},v_{||})';
  %   colormap(flipud(colormap('jet')))
     colormap('jet')
s.EdgeColor = 'none';
xlabel('log_{10} Energy (eV)')
% xlabel('v_{\perp}')
ylabel('Pitch Angle (\theta)')
% ylabel('v_{||}')       
zlabel('log_{10} Flux (cm^{-2} sec^{-1} ev^{-1} ster^{-1})')
%zlabel('Distribution function F')
%zlabel('log_{10} F(v_{||}, v_{\perp})')
disp(s)

 
%THE FITTING PROGRAM

dF = log10(F);
 %dy_trans = dF.';
 %f_new = dy_trans(:,9);
 [rowsize1, colsize1]  = size(dF)
% dF1 = reshape(dF,280000,1);
dF1 = reshape(dF,(rowsize1*colsize1),1);
  %b = dy.';
 [rowsize,colsize]  = size(dF1)
 ident = ones(rowsize,1);
 
 %either identity or ones (to be checked)
 
 %mat_one = ones(rowsize, colsize);
 %v_pertrans = v_per.';
 %v_paltrans = v_pal.';
 %v_per1 = v_pertrans(:,9);
 %v_pal1 = v_paltrans(:,9);
 
 %reshaping
 %V_per = reshape(v_per, 280000,1);
 V_per = reshape(v_per, (rowsize1*colsize1),1);
 vper_sq = V_per.^2;
 %V_pal = reshape(v_pal, 280000,1);
 V_pal = reshape(v_pal, (rowsize1*colsize1),1);
 vpal_sq = V_pal.^2;
 
 % we want to obtain Ax = b;
 %A_mat = [ident v_pal1 v_per1 vpal_sq vper_sq];
 A_mat1 = [ident V_pal vpal_sq vper_sq];
 C = (A_mat1.')*A_mat1;
 %[u, s, v] = svd(A_mat1,'econ');
 %C_new = (v)*inv(s)*(u.');
 H = (A_mat1.')*dF1;
 %x_mat = C_new*dF1 
 x_mat = inv(C)*H
 
 %The coefficients Bj for j = 1,2,3,4,5
 B1 = x_mat(1,:)
 B2 = x_mat(2,:)
 B3 = x_mat(3,:)
 B4 = x_mat(4,:)
 %B5 = x_mat(5,:)
 % fprintf('B1 = %f', B1)
 % fprintf('B2 = %f', B2)
 % fprintf('B3 = %f', B3)
 % fprintf('B4 = %f', B4)
 % fprintf('B5 = %f', B5)
 
 %Unpacking the physical moments parameter
 
 %solving for the thermal speed (alphas)
 %alpha_pal = sqrt(2*U_pal/B2)
 alpha_pal = sqrt(-1/B3)
 %fprintf('alpha_pal = %f', alpha_pal)
 %alpha_per = sqrt(2*U_per/B3)
 alpha_per = sqrt(-1/B4)
 %fprintf('alpha_per = %f', alpha_per)
 
 
 %U_pal = -1.0*B2/(2*B3)
 U_pal = 0.5*B2*(alpha_pal^2)
 %fprintf('U_pal = %f', U_pal)
 %U_per = -1.0*B3/(2*B5)
 %U_per = 0.5*B3*alpha_per
 %fprintf('U_per = %f', U_per)
 In_f0 = B1 - (B3*U_pal^2)
 %fprintf('In_f0 = %f', In_f0)
 
 
 %solving for the temperatures
 T_pal = (0.5*(alpha_pal^2)*m)/k0
 %fprintf('T_pal = %f', T_pal)
 T_per = (0.5*(alpha_per^2)*m)/k0
 %fprintf('T_per = %f', T_per)
 
 %solve for density (n)
 
 f0 = exp(In_f0);
 n = f0*(alpha_per^2)*(alpha_pal)*((sqrt(pi))^3)
 %fprintf('n = %f', n)
 
 %Anisotrophy 
 Anis = T_per/T_pal
%fprintf('Anis = %f', Anis)



end